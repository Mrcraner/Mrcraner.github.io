<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mrcrane的博客</title>
  
  <subtitle>寄君一曲，不问曲终人聚散</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrcraner.github.io/"/>
  <updated>2019-12-23T14:31:48.104Z</updated>
  <id>http://mrcraner.github.io/</id>
  
  <author>
    <name>Mrcrane</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微服务入门学习</title>
    <link href="http://mrcraner.github.io/2019/09/23/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
    <id>http://mrcraner.github.io/2019/09/23/微服务学习/</id>
    <published>2019-09-23T13:14:34.000Z</published>
    <updated>2019-12-23T14:31:48.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>刚开始进入软件行业时还是单体应用的时代，前后端分离的概念都还没普及，开发的时候需要花大量的时间在“强大”的JSP上面，那时候SOA已经算是新技术了。现在，微服务已经大行其道，有哪个互联网产品不说自己是微服务架构呢？<br>但是，对于微服务的理解每个人都不太一样，这篇文章主要是聊一聊我对微服务的理解以及如何搭建经典的微服务架构，目的是梳理一下自己的一些想法，如果存在不同看法的欢迎指正！</p><hr><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>首先，什么是微服务呢？</p><p>单体应用<br>相对的，要理解什么是微服务，那么可以先理解什么是单体应用，在没有提出微服务的概念的“远古”年代，一个软件应用，往往会将应用所有功能都开发和打包在一起，那时候的一个B/S应用架构往往是这样的：</p><p><img src="/2019/09/23/微服务学习/BS.png" alt="BS"></p><p>但是，当用户访问量变大导致一台服务器无法支撑时怎么办呢？加服务器加负载均衡，架构就变成这样了：<br><img src="/2019/09/23/微服务学习/BSB.png" alt="BSB"></p><p>后面发现把静态文件独立出来，通过CDN等手段进行加速，可以提升应用的整体相应，单体应用的架构就变成：</p><p><img src="/2019/09/23/微服务学习/BSC.png" alt="BSC"></p><p>上面3中架构都还是单体应用，只是在部署方面进行了优化，所以避免不了单体应用的根本的缺点：</p><p>代码臃肿，应用启动时间长；（代码超过1G的项目都有！）<br>回归测试周期长，修复一个小小bug可能都需要对所有关键业务进行回归测试。<br>应用容错性差，某个小小功能的程序错误可能导致整个系统宕机；<br>伸缩困难，单体应用扩展性能时只能整个应用进行扩展，造成计算资源浪费。<br>开发协作困难，一个大型应用系统，可能几十个甚至上百个开发人员，大家都在维护一套代码的话，代码merge复杂度急剧增加。</p><hr><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>我认为任何技术的演进都是有迹可循的，任何新技术的出现都是为了解决原有技术无法解决的需求，所以，微服务的出现就是因为原来单体应用架构已经无法满足当前互联网产品的技术需求。</p><p>在微服务架构之前还有一个概念：SOA（Service-Oriented Architecture）-面向服务的体系架构。我认为的SOA只是一个架构模型的方法论，并不是一个明确而严谨的架构标准，只是后面很多人将SOA与The Open Group的SOA参考模型等同了，认为严格按照TOG-SOA标准的才算真正的SOA架构。SOA就已经提出的面向服务的架构思想，所以微服务应该算是SOA的一种演进吧。</p><p>撇开架构先不说，什么样的服务才算微服务呢？</p><p>单一职责的。一个微服务应该都是单一职责的，这才是“微”的体现，一个微服务解决一个业务问题（注意是一个业务问题而不是一个接口）。<br>面向服务的。将自己的业务能力封装并对外提供服务，这是继承SOA的核心思想，一个微服务本身也可能使用到其它微服务的能力。<br>我觉得满足以上两点就可以认为典型的微服务.</p><hr><h1 id="微服务典型架构"><a href="#微服务典型架构" class="headerlink" title="微服务典型架构"></a>微服务典型架构</h1><p>微服务架构，核心是为了解决应用微服务化之后的服务治理问题。</p><p>应用微服务化之后，首先遇到的第一个问题就是服务发现问题，一个微服务如何发现其他微服务呢？最简单的方式就是每个微服务里面配置其他微服务的地址，但是当微服务数量众多的时候，这样做明显不现实。所以需要使用到微服务架构中的一个最重要的组件：服务注册中心，所有服务都注册到服务注册中心，同时也可以从服务注册中心获取当前可用的服务清单：<br> <img src="/2019/09/23/微服务学习/SERVERCENTER.png" alt="SERVERCENTER"><br>解决服务发现问题后，接着需要解决微服务分布式部署带来的第二个问题：服务配置管理的问题。当服务数量超过一定程度之后，如果需要在每个服务里面分别维护每一个服务的配置文件，运维人员估计要哭了。那么，就需要用到微服务架构里面第二个重要的组件：配置中心，微服务架构就变成下面这样了：<br> <img src="/2019/09/23/微服务学习/config.png" alt="config"><br>以上应用内部的服务治理，当客户端或外部应用调用服务的时候怎么处理呢？服务A可能有多个节点，服务A、服务B和服务C的服务地址都不同，服务授权验证在哪里做？这时，就需要使用到服务网关提供统一的服务入口，最终形成典型微服务架构：</p><p> <img src="/2019/09/23/微服务学习/cli.png" alt="cli"><br>上面是一个典型的微服务架构，当然微服务的服务治理还涉及很多内容，比如：</p><p>通过熔断、限流等机制保证高可用；<br>微服务之间调用的负载均衡；<br>分布式事务（2PC、3PC、TCC、LCN等）；<br>服务调用链跟踪等等。</p><hr><h1 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h1><p>目前国内企业使用的微服务框架主要是Spring Cloud和Dubbo（或者DubboX），但是Dubbo那两年的停更严重打击了开发人员对它的信心，Spring Cloud已经逐渐成为主流，比较两个框架的优劣势的文章在网上有很多，这里就不重复了，选择什么框架还是按业务需求来吧，业务框架决定技术框架。<br>Spring Cloud全家桶提供了各种各样的组件，基本可以覆盖微服务的服务治理的方方面面，以下列出了Spring Cloud一些常用组件：</p><p> <img src="/2019/09/23/微服务学习/springcloud.png" alt="springcloud"></p><hr><h1 id="搭建典型微服务架构"><a href="#搭建典型微服务架构" class="headerlink" title="搭建典型微服务架构"></a>搭建典型微服务架构</h1><p>本章节主要介绍如何基于Spring Cloud相关组件搭建一个典型的微服务架构。<br>首先，创建一个Maven父项目spring-cloud-examples，用于管理项目依赖包版本。由于Spring Cloud组件很多，为保证不同组件之间的兼容性，一般通过spring-cloud-dependencies统一管理Spring Cloud组件版本，而非每个组件单独引入。</p><p>pom.xml配置如下：</p><pre><code>&lt;!-- 继承SpringBoot父项目，注意与SpringCloud版本的匹配 --&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.1.4.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;properties&gt;    &lt;spring.boot.version&gt;2.1.4.RELEASE&lt;/spring.boot.version&gt;    &lt;spring.cloud.version&gt;Greenwich.SR1&lt;/spring.cloud.version&gt;    &lt;lombok.version&gt;1.18.8&lt;/lombok.version&gt;    &lt;maven.compiler.plugin.version&gt;3.8.1&lt;/maven.compiler.plugin.version&gt;&lt;/properties&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre> <hr><h2 id="搭建服务配置中心"><a href="#搭建服务配置中心" class="headerlink" title="搭建服务配置中心"></a>搭建服务配置中心</h2><p>在spring-cloud-examples项目下创建一个子项目spring-cloud-example-config，添加Spring Cloud Config Server端的相关依赖包:<br><dependencies><br>        <dependency><br>            <groupid>org.springframework.cloud</groupid><br>            <artifactid>spring-cloud-config-server</artifactid><br>        </dependency><br>    </dependencies><br>添加Spring Boot配置文件application.yml，配置如下：<br>spring:<br>  application:<br>    name: spring-cloud-example-config<br>  profiles:<br>    active: native #启用本地配置文件<br>  cloud:<br>    config:<br>      server:<br>        native:<br>          search-locations: classpath:/configs/ #配置文件扫描目录</p><p>server:<br>  port: 8000 #服务端口</p><p>启动类添加注解@EnableConfigServer通过启用Config Server服务。</p><p>@SpringBootApplication<br>@EnableConfigServer<br>public class Application {</p><pre><code>public static void main(String[] args) {    SpringApplication.run(Application.class, args);}</code></pre><p>}</p><h2 id="搭建服务注册中心"><a href="#搭建服务注册中心" class="headerlink" title="搭建服务注册中心"></a>搭建服务注册中心</h2><p>在spring-cloud-examples项目下创建一个子项目spring-cloud-example-registry，在pom.xml中添加Eureka Server相关依赖包：<br>    <dependencies><br>        <dependency><br>            <groupid>org.springframework.cloud</groupid><br>            <artifactid>spring-cloud-netflix-eureka-server</artifactid><br>        </dependency></dependencies></p><pre><code>    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>在spring-cloud-example-config配置中心项目的src/main/resource/configs目录下添加一个服务配置文件spring-cloud-example-registry.yml，配置如下：<br>spring:<br>  application:<br>    name: spring-cloud-example-registry</p><p> #Eureka相关配置<br>eureka:<br>  client:<br>    register-with-eureka: false #不注册服务<br>    fetch-registry: false #不拉去服务清单<br>    serviceUrl:<br>      defaultZone: <a href="http://localhost:${server.port}/eureka/" target="_blank" rel="noopener">http://localhost:${server.port}/eureka/</a> #多个通过英文逗号分隔</p><p>server:<br>  port: 8001</p><p>在spring-cloud-example-registry项目的src/main/resource/目录添加bootstrap.yml配置文件，配置如下：</p><p>spring:<br>  cloud:<br>    config:<br>      name: spring-cloud-example-registry #配置文件名称，多个通过逗号分隔<br>      uri: <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> #Config Server服务地址</p><p>启动类添加注解@EnableEurekaServer通过启用Eureka Server服务。<br>@SpringBootApplication<br>@EnableEurekaServer<br>public class Application {</p><pre><code>public static void main(String[] args) {    SpringApplication.run(Application.class, args);}</code></pre><p>}</p><h2 id="搭建业务服务A"><a href="#搭建业务服务A" class="headerlink" title="搭建业务服务A"></a>搭建业务服务A</h2><p>在spring-cloud-examples项目下创建一个业务服务A的子项目spring-cloud-example-biz-a，在pom.xml中添加以下依赖包：<br>    <dependencies><br>        <!-- Spring Boot Web Starter --><br>        <dependency><br>            <groupid>org.springframework.boot</groupid><br>            <artifactid>spring-boot-starter-web</artifactid><br>        </dependency></dependencies></p><pre><code>    &lt;!-- feign --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;!-- Eureka Client Starter --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;!-- Config Client Starter --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>在spring-cloud-example-config配置中心项目的src/main/resource/configs目录下添加一个服务配置文件spring-cloud-example-biz-a.yml，配置如下：<br>spring:<br>  application:<br>    name: spring-cloud-example-biz-a</p><p>server:<br>  port: 8010</p><p> /*Eureka相关配置<br>eureka:<br>  client:<br>    serviceUrl:<br>      defaultZone: <a href="http://localhost:8001/eureka/" target="_blank" rel="noopener">http://localhost:8001/eureka/</a><br>  instance:<br>    lease-renewal-interval-in-seconds: 10      # 心跳时间，即服务续约间隔时间（缺省为30s）<br>    lease-expiration-duration-in-seconds: 60  # 发呆时间，即服务续约到期时间（缺省为90s）<br>    prefer-ip-address: true<br>    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}</p><p>在spring-cloud-example-biz-a项目的src/main/resource/目录添加bootstrap.yml配置文件，配置如下：<br>spring:<br>  cloud:<br>    config:<br>      name: spring-cloud-example-biz-a #配置文件名称，多个通过逗号分隔<br>      uri: <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> #Config Server服务地址</p><p>添加一个示例接口，代码参考：</p><p>@RestController<br>@RequestMapping(“/hello”)<br>public class HelloController {<br>    /**<br>     * 示例方法<br>     *<br>     * @return<br>     */<br>    @GetMapping<br>    public String sayHello() {<br>        return “Hello,This is Biz-A Service.”;<br>    }<br>}</p><h2 id="搭建业务服务B"><a href="#搭建业务服务B" class="headerlink" title="搭建业务服务B"></a>搭建业务服务B</h2><p>参考上面业务服务A搭建另外一个业务服务B。</p><h2 id="搭建服务网关"><a href="#搭建服务网关" class="headerlink" title="搭建服务网关"></a>搭建服务网关</h2><p>在spring-cloud-examples项目下创建一个业务服务A的子项目spring-cloud-example-gateway，在pom.xml中添加以下依赖包：<br>  <dependencies><br>        <!-- zuul --><br>        <dependency><br>            <groupid>org.springframework.cloud</groupid><br>            <artifactid>spring-cloud-starter-netflix-zuul</artifactid><br>        </dependency></dependencies></p><pre><code>    &lt;!-- Eureka Client Starter --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;!-- Config Client Starter --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>在spring-cloud-example-config配置中心项目的src/main/resource/configs目录下添加一个服务配置文件spring-cloud-example-gateway.yml，配置如下：</p><p>spring:<br>  application:<br>    name: spring-cloud-example-gateway</p><p>server:<br>  port: 8002</p><p> #Eureka相关配置<br>eureka:<br>  client:<br>    serviceUrl:<br>      defaultZone: <a href="http://localhost:8001/eureka/" target="_blank" rel="noopener">http://localhost:8001/eureka/</a><br>  instance:<br>    lease-renewal-interval-in-seconds: 10      # 心跳时间，即服务续约间隔时间（缺省为30s）<br>    lease-expiration-duration-in-seconds: 60  # 发呆时间，即服务续约到期时间（缺省为90s）<br>    prefer-ip-address: true<br>    instance-id: ${spring.application.name}:${spring.application.instance_id:${server.port}}</p><p>在spring-cloud-example-gateway项目的src/main/resource/目录添加bootstrap.yml配置文件，配置如下：</p><p>spring:<br>  cloud:<br>    config:<br>      name: spring-cloud-example-gateway #配置文件名称，多个通过逗号分隔<br>      uri: <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> #Config Server服务地址</p><p>启动类添加注解@EnableZuulProxy通过启用网关代理服务。</p><p>@SpringBootApplication<br>@EnableZuulProxy<br>public class Application {</p><pre><code>public static void main(String[] args) {    SpringApplication.run(Application.class, args);}</code></pre><p>}</p><h2 id="启动示例"><a href="#启动示例" class="headerlink" title="启动示例"></a>启动示例</h2><p>启动顺序<br>spring-cloud-example-config&gt;&gt;spring-cloud-example-eureka&gt;&gt;spring-cloud-example-biz-a/spring-cloud-example-biz-b/spring-cloud-example-gateway</p><p>通过网关访问服务A接口</p><p> <img src="/2019/09/23/微服务学习/a.png" alt="a"></p><p>通过网关访问服务B接口</p><p><img src="/2019/09/23/微服务学习/b.png" alt="b"></p><h2 id="服务之间调用"><a href="#服务之间调用" class="headerlink" title="服务之间调用"></a>服务之间调用</h2><p>在业务服务A中添加一个Feign Client Bean，参考代码如下：</p><p>@FeignClient(name = “spring-cloud-example-biz-b”) # 指定服务名称<br>public interface RemoteService {</p><pre><code>/** * 调用服务B的hello方法 * * @return */@GetMapping(&quot;/hello&quot;) #指定请求地址String sayHello();</code></pre><p>}</p><p>业务服务A示例接口类增加call2b接口，代码如下：</p><p>@RestController<br>@RequestMapping(“/hello”)<br>public class HelloController {</p><pre><code>@Autowiredprivate RemoteService remoteService;/** * 示例方法 * * @return */@GetMappingpublic String sayHello() {    return &quot;Hello,This is Biz-A Service.&quot;;}/** * 示例方法：调用服务B * * @return */@GetMapping(path = &quot;/call2b&quot;)public String sayHello2B() {    return remoteService.sayHello();}</code></pre><p>}</p><p>重启业务服务A，通过调用/hello/call2b接口：<br><img src="/2019/09/23/微服务学习/aa.png" alt="aa"></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>码云：centychen/spring-cloud-examples</p><hr><h1 id="下一代微服务"><a href="#下一代微服务" class="headerlink" title="下一代微服务"></a>下一代微服务</h1><p>目前网上很多说是下一代微服务架构就是Service Mesh，Service Mesh主流框架有Linkerd和Istio，其中Istio有大厂加持所以呼声更高。Service Mesh我接触还不多，但是个人感觉并不一定能称为下一代微服务架构，可能认为是服务治理的另外一种解决方案更合适，是否能够取代当前的微服务架构还需要持续观察。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h1&gt;&lt;p&gt;刚开始进入软件行业时还是单体应用的时代，前后端分离的概念都还没普及，开发的时候需要花大量的时间在“强大”的JSP上面，那时候SOA已经算是新
      
    
    </summary>
    
    
      <category term="微服务学习" scheme="http://mrcraner.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>古词古韵</title>
    <link href="http://mrcraner.github.io/2019/07/25/%E5%8F%A4%E8%AF%8D%E5%8F%A4%E9%9F%B5/"/>
    <id>http://mrcraner.github.io/2019/07/25/古词古韵/</id>
    <published>2019-07-25T00:25:01.000Z</published>
    <updated>2019-07-25T06:43:58.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-原文"><a href="#第一章-原文" class="headerlink" title="第一章 原文"></a>第一章 原文</h2><p>  野有蔓草<br>野有蔓草，零露漙（tuan)兮。</p><p>有美一人，清扬婉兮。</p><p>邂逅相遇，适我愿兮。</p><p>野有蔓草，零露瀼瀼(rang)。</p><p>有美一人，婉如清扬。</p><p>邂逅相遇，与子偕臧(zang)。</p><hr><h2 id="第二章-注释"><a href="#第二章-注释" class="headerlink" title="第二章 注释"></a>第二章 注释</h2><p>野：郊外田野。<br>蔓：茂盛。<br>零露：1、降落的露水。2、比喻容易消失的事物。<br>漙：音团（tuan)，形容露水多。<br>清扬：形容眼睛清澄明亮。<br>婉：美丽。<br>邂逅：没有事行相约，碰巧相遇。<br>适：指女子出嫁。<br>瀼：（二声），形容露水多；瀼瀼：露水多的样子。<br>偕：同； 臧：（平声）善，好。偕臧，相爱。</p><hr><h2 id="第三章-译文"><a href="#第三章-译文" class="headerlink" title="第三章 译文"></a>第三章 译文</h2><p>野外野草滋蔓，露水成珠圆圆。<br>有位美丽人儿，眼波顾盼生香。<br>有缘不期相遇，真是合我心愿。<br>野外野草如茵，露水密密晶莹。<br>有位俏丽人儿，纯如水波飞扬。<br>不期让我遇到，把乐和我分享。</p><hr><p>##参考文献 国风-郑风·野有蔓草鉴赏</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章-原文&quot;&gt;&lt;a href=&quot;#第一章-原文&quot; class=&quot;headerlink&quot; title=&quot;第一章 原文&quot;&gt;&lt;/a&gt;第一章 原文&lt;/h2&gt;&lt;p&gt;  野有蔓草&lt;br&gt;野有蔓草，零露漙（tuan)兮。&lt;/p&gt;
&lt;p&gt;有美一人，清扬婉兮。&lt;/p&gt;
&lt;p&gt;邂逅
      
    
    </summary>
    
    
      <category term="美文赏析" scheme="http://mrcraner.github.io/tags/%E7%BE%8E%E6%96%87%E8%B5%8F%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mrcraner.github.io/2019/07/25/hello-world/"/>
    <id>http://mrcraner.github.io/2019/07/25/hello-world/</id>
    <published>2019-07-25T00:14:32.858Z</published>
    <updated>2019-07-25T00:14:32.859Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
